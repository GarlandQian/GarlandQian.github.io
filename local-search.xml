<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vue自由拖拽vue3-dnd(六)</title>
    <link href="/2024/02/04/vue3-dnd/vue%E8%87%AA%E7%94%B1%E6%8B%96%E6%8B%BDvue3-dnd(%E5%85%AD)/"/>
    <url>/2024/02/04/vue3-dnd/vue%E8%87%AA%E7%94%B1%E6%8B%96%E6%8B%BDvue3-dnd(%E5%85%AD)/</url>
    
    <content type="html"><![CDATA[<h1 id="vue自由拖拽vue3-dnd-六"><a href="#vue自由拖拽vue3-dnd-六" class="headerlink" title="vue自由拖拽vue3-dnd(六)"></a>vue自由拖拽vue3-dnd(六)</h1><h2 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a><a href="https://www.vue3-dnd.com/guide/backend/html5.html#html5">HTML5</a></h2><p>这是由<code>react-dnd</code>主要支持的Backend。它在底层使用了<code>HTML5</code>的<code>Drag</code>和<code>Drop</code>事件。并且处理了<a href="http://quirksmode.org/blog/archives/2009/09/the_html5_drag.html">它的一些问题</a>。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a><a href="https://www.vue3-dnd.com/guide/backend/html5.html#%E5%AE%89%E8%A3%85">安装</a></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install react-dnd-html5-backend<br></code></pre></td></tr></table></figure><h3 id="额外功能"><a href="#额外功能" class="headerlink" title="额外功能"></a><a href="https://www.vue3-dnd.com/guide/backend/html5.html#%E9%A2%9D%E5%A4%96%E5%8A%9F%E8%83%BD">额外功能</a></h3><p>除了导出的<code>Backend</code>，HTML5 Backend 还提供了一些额外的功能:</p><ul><li><code>getEmptyImage()</code>: 它是一个返回透明空图像的函数。用于使用DragSource的<code>dragPreview</code>连接器来完全隐藏浏览器绘制的拖动预览。方便绘制自定义拖动层<code>DragLayer</code>。请注意，自定义拖拽预览在IE中不起作用。</li><li><code>NativeTypes</code>: 三个常量<code>NativeTypes</code>的枚举。<code>NativeTypes.FILE</code>, <code>NativeTypes.URL</code>和 <code>NativeTypes.TEXT</code>。您可以给放置目标指定这些类型，用于处理本地文件、url或常规页面文本的拖拽放置。</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a><a href="https://www.vue3-dnd.com/guide/backend/html5.html#%E4%BD%BF%E7%94%A8">使用</a></h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> </span></span><span class="hljs-template-variable">&#123; HTML5Backend &#125;</span><span class="language-xml"><span class="language-javascript"> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dnd-html5-backend&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> </span></span><span class="hljs-template-variable">&#123; DndProvider &#125;</span><span class="language-xml"><span class="language-javascript"> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue3-dnd&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">DndProvider</span> <span class="hljs-attr">:backend</span>=<span class="hljs-string">&quot;HTML5Backend&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- your drag-and-drop application --&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">DndProvider</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">copy</span><br></code></pre></td></tr></table></figure><p>当你在<code>monitor</code>监视器上调用<code>getItem()</code>时，HTML5 Backend会根据drop类型暴露事件中的各种数据:</p><ul><li><p><code>NativeTypes.FILE:</code></p><ul><li><code>getItem().files</code>, 一个数组，包含拖拽的文件</li><li><code>getItem().items</code>, 使用 <code>event.dataTransfer.items</code>（您可以在删除目录时使用它来列出文件）</li></ul></li><li><p><code>NativeTypes.URL:</code></p><ul><li><code>getItem().url</code>, 一个数组，包含拖拽的 URL</li></ul></li><li><p><code>NativeTypes.TEXT:</code></p><ul><li><code>getItem().text</code>, 拖拽的文本</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue 自由拖拽vue3-dnd(五)</title>
    <link href="/2024/02/04/vue3-dnd/vue%E8%87%AA%E7%94%B1%E6%8B%96%E6%8B%BDvue3-dnd(%E4%BA%94)/"/>
    <url>/2024/02/04/vue3-dnd/vue%E8%87%AA%E7%94%B1%E6%8B%96%E6%8B%BDvue3-dnd(%E4%BA%94)/</url>
    
    <content type="html"><![CDATA[<h1 id="vue-自由拖拽vue3-dnd-五-Monitors"><a href="#vue-自由拖拽vue3-dnd-五-Monitors" class="headerlink" title="vue 自由拖拽vue3-dnd(五)-Monitors"></a>vue 自由拖拽vue3-dnd(五)-<strong>Monitors</strong></h1><h2 id="DragSourceMonitor"><a href="#DragSourceMonitor" class="headerlink" title="DragSourceMonitor"></a><a href="https://www.vue3-dnd.com/guide/monitors/drag-source-monitor.html#dragsourcemonitor">DragSourceMonitor</a></h2><p><code>DragSourceMonitor</code> 是传递给<code>DragSource</code>拖动源的对象。它提供了一些方法，让你可以获取到有关拖动源的一些状态信息。绑定到该监视器的特定拖动源在下面称为监视器的所有者。</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a><a href="https://www.vue3-dnd.com/guide/monitors/drag-source-monitor.html#%E6%96%B9%E6%B3%95">方法</a></h3><table><thead><tr><th align="left">方法名</th><th align="left">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>canDrag()</code></td><td align="left"><code>() =&gt; boolean</code></td><td align="left">如果没有正在进行的拖动操作，并且所有者<code>useDrag</code>的<code>canDrag()</code>方法返回<code>true</code>或者<code>undefined</code>，则返回<code>true</code>，否则返回<code>false</code>。</td></tr><tr><td align="left"><code>isDragging()</code></td><td align="left"><code>() =&gt; boolean</code></td><td align="left">如果正在进行的拖动操作，并且所有者正在被拖动，或者<code>useDrag</code>的<code>isDragging()</code>方法返回<code>true</code>，该方法就会返回<code>true</code>，否则返回<code>false</code>。</td></tr><tr><td align="left"><code>getItemType()</code></td><td align="left"><code>() =&gt; (string | null)</code></td><td align="left">返回标识当前拖动项的类型<code>type</code>。如果没有项目被拖动，则返回<code>null</code>。</td></tr><tr><td align="left"><code>getItem()</code></td><td align="left"><code>() =&gt; (object | null)</code></td><td align="left">返回表示当前拖动项的普通对象。每个拖动源必须通过从其<code>item</code>属性来指定它。如果没有项目被拖动，则返回<code>null</code>。</td></tr><tr><td align="left"><code>getDropResult()</code></td><td align="left"><code>() =&gt; (object | null)</code></td><td align="left">返回一个表示最后记录的放置结果的普通对象。<br>放置目标可以通过从它们的<code>drop()</code>方法返回一个对象来指定它。<br>当放置目标为嵌套目标时，任何显式地从<code>drop()</code>返回自己的结果的父对象都会覆盖之前由子对象设置的<code>drop</code>结果。<br><strong>它只能在<code>end()</code>内部调用</strong>，如果在<code>end()</code>外部调用，则返回<code>null</code>。</td></tr><tr><td align="left"><code>didDrop()</code></td><td align="left"><code>() =&gt; boolean</code></td><td align="left">如果某个拖放目标已经处理了拖放事件则返回<code>true</code>，否则返回<code>false</code>。即使目标没有返回放置结果，<code>didDrop()</code>也会返回<code>true</code>。 <br>可以在<code>end()</code>中使用它来检查是否有放置目标已经处理了这次拖拽。<br>如果在<code>end()</code>外部调用，则返回<code>false</code>。</td></tr><tr><td align="left"><code>getInitialClientOffset()</code></td><td align="left"><code>() =&gt; &#123; x: number, y: number &#125;</code></td><td align="left">返回当前拖动开始时鼠标指针相对于客户端的初始位置<code>&#123;x, y&#125;</code>。 如果没有项目被拖动，则返回<code>null</code>。</td></tr><tr><td align="left"><code>getInitialSourceClientOffset()</code></td><td align="left"><code>() =&gt; &#123; x: number, y: number &#125;</code></td><td align="left">返回当前拖动开始时，拖动源的根DOM节点相对于客户端的初始位置<code>&#123;x, y&#125;</code>。 如果没有项目被拖动，则返回<code>null</code>。</td></tr><tr><td align="left"><code>getClientOffset()</code></td><td align="left"><code>() =&gt; &#123; x: number, y: number &#125;</code></td><td align="left">返回拖动起始点的鼠标指针相对于客户端的偏移量<code>&#123;x, y&#125;</code>。 如果没有项目被拖动，则返回<code>null</code>。</td></tr><tr><td align="left"><code>getDifferenceFromInitialOffset()</code></td><td align="left"><code>() =&gt; &#123; x: number, y: number &#125;</code></td><td align="left">返回当前拖动中鼠标指针相对于开始拖动时的鼠标指针位置的偏移量<code>&#123;x, y&#125;</code>。 如果没有项目被拖动，则返回<code>null</code>。</td></tr><tr><td align="left"><code>getSourceClientOffset()</code></td><td align="left"><code>() =&gt; &#123; x: number, y: number &#125;</code></td><td align="left">返回当前拖动源的根DOM节点相对于客户端的偏移量<code>&#123;x, y&#125;</code>。 如果没有项目被拖动，则返回<code>null</code>。</td></tr></tbody></table><div class="note note-warning">            <p>注意 ，如果需要获取鼠标的 <strong>实时轨迹</strong> （实时的Offset），应该关注一下 DropTargetMonitor 中的回调，比如 hover</p>          </div><h2 id="DropTargetMonitor"><a href="#DropTargetMonitor" class="headerlink" title="DropTargetMonitor"></a><a href="https://www.vue3-dnd.com/guide/monitors/drop-target-monitor.html#droptargetmonitor">DropTargetMonitor</a></h2><p><code>DropTargetMonitor</code> 是传递给<code>DropTarget</code>放置目标的对象。它提供了一些方法，让你可以获取到有关放置目标的一些状态信息。绑定到该监视器的特定放置目标在下面称为监视器的所有者。</p><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a><a href="https://www.vue3-dnd.com/guide/monitors/drop-target-monitor.html#%E6%96%B9%E6%B3%95">方法</a></h3><table><thead><tr><th>方法名</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>canDrop()</code></td><td><code>() =&gt; boolean</code></td><td>如果有正在进行的拖动操作，并且所有者<code>useDrop</code>的<code>canDrop()</code>方法返回<code>true</code>或者<code>undefined</code>，则返回<code>true</code>，否则返回<code>false</code>。</td></tr><tr><td><code>isOver()</code></td><td><code>(options?: &#123; shallow: boolean &#125;) =&gt; boolean</code></td><td>如果有正在进行的拖动操作，并且指针当前悬停在所有者的上方，则返回true。你可以选择通过<code>&#123;shallow: true&#125;</code>来严格检查是否只有所有者被悬浮，而不是嵌套的目标。</td></tr><tr><td><code>getItemType()</code></td><td><code>() =&gt; (string | null)</code></td><td>返回标识当前拖动项的类型<code>type</code>。如果没有项目被拖动，则返回<code>null</code>。</td></tr><tr><td><code>getItem()</code></td><td><code>() =&gt; (object | null)</code></td><td>返回表示当前拖动项的普通对象。每个拖动源必须通过从其<code>item</code>属性来指定它。如果没有项目被拖动，则返回<code>null</code>。</td></tr><tr><td><code>getDropResult()</code></td><td><code>() =&gt; (object | null)</code></td><td>返回一个表示最后记录的放置结果的普通对象。 <br>放置目标可以通过从它们的<code>drop()</code>方法返回一个对象来指定它。 <br>当放置目标为嵌套目标时，任何显式地从<code>drop()</code>返回自己的结果的父对象都会覆盖之前由子对象设置的<code>drop</code>结果。 <br><strong>它只能在<code>drop()</code>内部调用</strong>，如果在<code>drop()</code>外部调用，则返回<code>null</code>。</td></tr><tr><td><code>didDrop()</code></td><td><code>() =&gt; boolean</code></td><td>如果某个拖放目标已经处理了拖放事件则返回<code>true</code>，否则返回<code>false</code>。即使目标没有返回放置结果，<code>didDrop()</code>也会返回<code>true</code>。 <br>可以在<code>drop()</code>中使用它来检查是否有放置目标已经处理了这次拖拽。如果在<code>drop()</code>外部调用，则返回<code>false</code>。</td></tr><tr><td><code>getInitialClientOffset()</code></td><td><code>() =&gt; &#123; x: number, y: number &#125;</code></td><td>返回当前拖动开始时鼠标指针相对于客户端的初始位置<code>&#123;x, y&#125;</code>。 <br>如果没有项目被拖动，则返回null。</td></tr><tr><td><code>getInitialSourceClientOffset()</code></td><td><code>() =&gt; &#123; x: number, y: number &#125;</code></td><td>返回当前拖动开始时，拖动源的根DOM节点相对于客户端的初始位置<code>&#123;x, y&#125;</code>。 <br>如果没有项目被拖动，则返回null。</td></tr><tr><td><code>getClientOffset()</code></td><td><code>() =&gt; &#123; x: number, y: number &#125;</code></td><td>返回当前拖动中鼠标指针相对于客户端的偏移量<code>&#123;x, y&#125;</code>。 <br>如果没有项目被拖动，则返回null。</td></tr><tr><td><code>getDifferenceFromInitialOffset()</code></td><td><code>() =&gt; &#123; x: number, y: number &#125;</code></td><td>返回当前拖动中鼠标指针相对于开始拖动时的鼠标指针位置的偏移量<code>&#123;x, y&#125;</code>。 <br>如果没有项目被拖动，则返回null。</td></tr><tr><td><code>getSourceClientOffset()</code></td><td><code>() =&gt; &#123; x: number, y: number &#125;</code></td><td>返回当前拖动源的根DOM节点相对于客户端的偏移量<code>&#123;x, y&#125;</code>。 <br>如果没有项目被拖动，则返回null。</td></tr></tbody></table><h2 id="DragLayerMonitor"><a href="#DragLayerMonitor" class="headerlink" title="DragLayerMonitor"></a><a href="https://www.vue3-dnd.com/guide/monitors/drag-layer-monitor.html#draglayermonitor">DragLayerMonitor</a></h2><p><code>DragLayerMonitor</code> 是传递给<code>DragLayer</code>拖动层<code>collect</code>收集函数的对象。它提供了一些方法，让你可以获取到全局拖放状态信息。</p><h3 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a><a href="https://www.vue3-dnd.com/guide/monitors/drag-layer-monitor.html#%E6%96%B9%E6%B3%95">方法</a></h3><table><thead><tr><th>方法名</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>isDragging()</code></td><td><code>() =&gt; boolean</code></td><td>如果正在进行的拖动操作，并且所有者正在被拖动，或者<code>useDrag</code>的<code>isDragging()</code>方法返回<code>true</code>，该方法就会返回<code>true</code>，否则返回<code>false</code>。</td></tr><tr><td><code>getItemType()</code></td><td><code>() =&gt; (string | null)</code></td><td>返回标识当前拖动项的类型<code>type</code>。如果没有项目被拖动，则返回<code>null</code>。</td></tr><tr><td><code>getItem()</code></td><td><code>() =&gt; (object | null)</code></td><td>返回表示当前拖动项的普通对象。每个拖动源必须通过从其<code>item</code>属性来指定它。如果没有项目被拖动，则返回<code>null</code>。</td></tr><tr><td><code>getInitialClientOffset()</code></td><td><code>() =&gt; &#123; x: number, y: number &#125;</code></td><td>返回当前拖动开始时鼠标指针相对于客户端的初始位置<code>&#123;x, y&#125;</code>。 <br>如果没有项目被拖动，则返回null。</td></tr><tr><td><code>getInitialSourceClientOffset()</code></td><td><code>() =&gt; &#123; x: number, y: number &#125;</code></td><td>返回当前拖动开始时，拖动源的根DOM节点相对于客户端的初始位置<code>&#123;x, y&#125;</code>。 <br>如果没有项目被拖动，则返回null。</td></tr><tr><td><code>getClientOffset()</code></td><td><code>() =&gt; &#123; x: number, y: number &#125;</code></td><td>返回当前拖动中鼠标指针相对于客户端的偏移量<code>&#123;x, y&#125;</code>。 <br>如果没有项目被拖动，则返回null。</td></tr><tr><td><code>getDifferenceFromInitialOffset()</code></td><td><code>() =&gt; &#123; x: number, y: number &#125;</code></td><td>返回当前拖动中鼠标指针相对于开始拖动时的鼠标指针位置的偏移量<code>&#123;x, y&#125;</code>。 <br>如果没有项目被拖动，则返回null。</td></tr><tr><td><code>getSourceClientOffset()</code></td><td><code>() =&gt; &#123; x: number, y: number &#125;</code></td><td>返回当前拖动源的根DOM节点相对于客户端的偏移量<code>&#123;x, y&#125;</code>。 <br>如果没有项目被拖动，则返回null。</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue 自由拖拽vue3-dnd(四)</title>
    <link href="/2024/02/02/vue3-dnd/vue%E8%87%AA%E7%94%B1%E6%8B%96%E6%8B%BDvue3-dnd(%E5%9B%9B)/"/>
    <url>/2024/02/02/vue3-dnd/vue%E8%87%AA%E7%94%B1%E6%8B%96%E6%8B%BDvue3-dnd(%E5%9B%9B)/</url>
    
    <content type="html"><![CDATA[<h1 id="vue-自由拖拽vue3-dnd-四-Composition-API"><a href="#vue-自由拖拽vue3-dnd-四-Composition-API" class="headerlink" title="vue 自由拖拽vue3-dnd(四)-Composition API"></a>vue 自由拖拽vue3-dnd(四)-Composition API</h1><p>提供了三个主要的钩子来将你的组件连接到 Vue3 DnD。并且提供了第四个钩子来让你在开发或测试中连接到 Vue3 DnD。</p><ul><li><code>useDrag</code></li><li><code>useDrop</code></li><li><code>useDragLayer</code></li><li><code>useDragDropManager</code>（开发&#x2F;测试挂钩）</li></ul><h2 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a><a href="https://www.vue3-dnd.com/guide/composition/#%E5%9F%BA%E6%9C%AC%E7%A4%BA%E4%BE%8B">基本示例</a></h2><p>使用 composition api 制作一个简单的可以拖放的盒子。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">import</span> &#123; useDrag &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue3-dnd&#x27;</span></span><br><span class="language-javascript">  <span class="hljs-keyword">import</span> &#123; toRefs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@vueuse/core&quot;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> [collect, drag, dragPreview] = <span class="hljs-title function_">useDrag</span>(<span class="hljs-function">() =&gt;</span> (&#123;</span><br><span class="language-javascript">    <span class="hljs-comment">// “type”是必需的。它由放置目标的“accept”使用。</span></span><br><span class="language-javascript">    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;BOX&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-comment">// collect 函数传入一个“监视器”实例，用于从 DnD 中获取需要的状态信息。</span></span><br><span class="language-javascript">    <span class="hljs-attr">collect</span>: <span class="hljs-function">(<span class="hljs-params">monitor</span>) =&gt;</span> (&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">isDragging</span>: monitor.<span class="hljs-title function_">isDragging</span>()</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">  &#125;))</span><br><span class="language-javascript">  <span class="hljs-comment">// collect是一个Ref对象，默认取值需要从collect.value中获取,</span></span><br><span class="language-javascript">  <span class="hljs-comment">// 可以使用toRefs将Ref对象转换为可解构的对象</span></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> &#123; isDragging &#125; = <span class="hljs-title function_">toRefs</span>(collect)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 这是可选的。默认情况下，dragPreview 将附加到 dragSource --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:ref</span>=<span class="hljs-string">&quot;dragPreview&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123; opacity: isDragging ? 0.5 : 1 &#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;Handle&quot;</span> <span class="hljs-attr">:ref</span>=<span class="hljs-string">&quot;drag&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接下来，我们需要一个放置目标。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">import</span> &#123;useDrop&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue3-dnd&#x27;</span></span><br><span class="language-javascript">  <span class="hljs-keyword">import</span> &#123;toRefs&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vueuse/core&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> [collect, drop] = <span class="hljs-title function_">useDrop</span>(<span class="hljs-function">() =&gt;</span> (&#123;</span><br><span class="language-javascript">    <span class="hljs-comment">// 允许放置的type(string|symbol)，或者types</span></span><br><span class="language-javascript">    <span class="hljs-attr">accept</span>: <span class="hljs-string">&#x27;BOX&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-comment">// 传递个collect的数据</span></span><br><span class="language-javascript">    <span class="hljs-attr">collect</span>: <span class="hljs-function"><span class="hljs-params">monitor</span> =&gt;</span> (&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">isOver</span>: monitor.<span class="hljs-title function_">isOver</span>(),</span><br><span class="language-javascript">      <span class="hljs-attr">canDrop</span>: monitor.<span class="hljs-title function_">canDrop</span>(),</span><br><span class="language-javascript">    &#125;),</span><br><span class="language-javascript">  &#125;))</span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> &#123;canDrop, isOver&#125; = <span class="hljs-title function_">toRefs</span>(collect)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:ref</span>=<span class="hljs-string">&quot;drop&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123; backgroundColor: isOver ? &#x27;red&#x27; : &#x27;white&#x27; &#125;&quot;</span>&gt;</span><br>    &#123;&#123; canDrop ? &#x27;Release to drop&#x27; : &#x27;Drag a box here&#x27; &#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样我们就实现了一个拖拽的盒子，你可以接着阅读单独的 API 文档，或者查看 <a href="https://www.vue3-dnd.com/example/">示例</a>。</p><h2 id="useDrag"><a href="#useDrag" class="headerlink" title="useDrag"></a><a href="https://www.vue3-dnd.com/guide/composition/use-drag.html#usedrag">useDrag</a></h2><p><code>useDrag</code> 函数提供了一种将你的组件作为 <strong>拖拽源</strong> 连接到 DnD 的方法。它接收一个 <code>Specification</code>，你可以通过 <code>type</code> 指定拖拽的类型，通过 <code>item</code> 表示拖动源的数据，通过 <code>collect</code> 获取拖拽状态等等。</p><p><code>useDrag</code> 返回了三个值：<code>collect</code> 函数的返回值，<code>dragSource</code> 和 <code>dragPreview</code> 的连接器函数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">import</span> &#123; useDrag &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue3-dnd&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> [collectedProps, dragSource, dragPreview] = <span class="hljs-title function_">useDrag</span>(<span class="hljs-function">() =&gt;</span> (&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;BOX&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">item</span>: &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;1&#x27;</span> &#125;,</span><br><span class="language-javascript">  &#125;))</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;collectedProps.isDragging&quot;</span> <span class="hljs-attr">:ref</span>=<span class="hljs-string">&quot;dragPreview&quot;</span>&gt;</span>dragPreview<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else</span> <span class="hljs-attr">:ref</span>=<span class="hljs-string">&quot;dragSource&quot;</span>&gt;</span>dragSource<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a><a href="https://www.vue3-dnd.com/guide/composition/use-drag.html#%E5%8F%82%E6%95%B0">参数</a></h3><p><code>useDrag</code> 的参数可以是一个 <code>Specification</code> 对象，也可以是一个函数，返回一个 <code>Specification</code> 对象，有关 <code>Specification</code> 的详细信息，请参考 <a href="https://www.vue3-dnd.com/guide/composition/use-drag.html#specification-%E5%AF%B9%E8%B1%A1">Specification</a>。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a><a href="https://www.vue3-dnd.com/guide/composition/use-drag.html#%E8%BF%94%E5%9B%9E%E5%80%BC">返回值</a></h3><p><code>useDrag</code> 返回一个数组，包含三个值：<code>collect</code> 函数的返回值，<code>dragSource</code> 和 <code>dragPreview</code> 的连接器函数</p><ul><li><p><code>[0] -  Collected Props</code> </p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-title class_">Ref</span>&lt;<span class="hljs-built_in">object</span>&gt;<br></code></pre></td></tr></table></figure><ul><li>它是一个 <code>Ref</code> 对象，它的 <code>value</code> 指向 <code>collect</code> 函数的返回值，如果没有定义 <code>collect</code> 函数，它的 <code>value</code> 就是一个空对象</li></ul></li><li><p><code>[1] -  DragSource Connector</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts">(<span class="hljs-attr">el</span>: <span class="hljs-title class_">Ref</span>&lt;<span class="hljs-title class_">HTMLElement</span>&gt; | <span class="hljs-title class_">HTMLElement</span>, options?: <span class="hljs-title class_">DragSourceOptions</span>) =&gt; <span class="hljs-title class_">HTMLElement</span><br></code></pre></td></tr></table></figure><ul><li><p>拖拽源的连接器函数。<strong>它必须被调用</strong>，并且传入一个 <code>Ref&lt;HTMLElement&gt; | HTMLElement</code> 的可拖拽 DOM 元素；</p></li><li><p>第二个参数是一个 options 对象，与 Specification 对象的 options 一致</p></li></ul></li><li><p><code>[2] - DragPreview Connector</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts">(<span class="hljs-attr">el</span>: <span class="hljs-title class_">Ref</span>&lt;<span class="hljs-title class_">HTMLElement</span>&gt; | <span class="hljs-title class_">HTMLElement</span>, options?: <span class="hljs-title class_">DragPreviewOptions</span>) =&gt; <span class="hljs-title class_">HTMLElement</span><br></code></pre></td></tr></table></figure><ul><li><p>拖拽预览的连接器函数。它是可选的，<strong>默认使用 dragSource 作为预览元素</strong>，接收一个 <code>Ref&lt;HTMLElement&gt; | HTMLElement</code> 的可拖拽 DOM 元素；</p></li><li><p>第二个参数是一个 options 对象，与 Specification 对象的 previewOptions 一致</p></li></ul></li></ul><h3 id="Specification-对象"><a href="#Specification-对象" class="headerlink" title="Specification 对象"></a><a href="https://www.vue3-dnd.com/guide/composition/use-drag.html#specification-%E5%AF%B9%E8%B1%A1">Specification 对象</a></h3><p>在了解 <code>Specification</code> 对象的基本用法之前，你可能需要先了解一下 <a href="https://www.vue3-dnd.com/guide/monitors/drag-source-monitor.html">DragSourceMonitor</a> 对象。</p><table><thead><tr><th align="left">Key</th><th>必填</th><th align="left">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">type</td><td>是</td><td align="left"><code>string | symbol</code></td><td align="left">拖拽元素的类型</td></tr><tr><td align="left">item</td><td>是</td><td align="left"><code>object | () =&gt; object</code></td><td align="left">对象时，它是一个描述被拖动数据的纯 JavaScript 对象。<br> 这是拖放目标唯一可用的关于拖动源的信息，因此选择他们需要知道的最少数据很重要。<br> 您可能很想在此处放置一个复杂的引用，但您应该尽量避免这样做，因为它会耦合拖动源和放置目标。使用类似的东西是个好主意 <code>&#123; id &#125;</code>。<br/> 函数时，它在拖动操作开始时被触发并返回一个表示拖动操作的对象。如果返回 <code>null</code>，则取消拖动操作。</td></tr><tr><td align="left">collect</td><td>否</td><td align="left"><code>(monitor: DragSourceMonitor) =&gt; CollectedProps</code></td><td align="left">一个收集器的函数。它应该返回一个普通对象并成为 <code>useDrag</code> 返回值中的第一个项。</td></tr><tr><td align="left">previewOptions</td><td>否</td><td align="left"><code>DragPreviewOptions</code></td><td align="left">一个描述拖动预览选项的纯 JavaScript 对象。</td></tr><tr><td align="left">options</td><td>否</td><td align="left"><code>DragSourceOptions</code></td><td align="left">一个普通对象，可选地包含以下任何属性：<br> <code>dropEffect</code>: 非必填，在此拖动中使用的拖放效果类型。可选值：&#96;’move’</td></tr><tr><td align="left">end</td><td>否</td><td align="left"><code>(draggedItem: object, monitor: DragSourceMonitor) =&gt; void</code></td><td align="left">当拖动停止时，<code>end</code> 函数会被调用。<br> 你可以调用 <code>monitor.didDrop()</code> 以检查本次拖拽是否成功; <br> 如果它成功，并且放置目标通过从其 <code>drop()</code> 方法返回一个普通对象来指定放置结果，那么它将作为 <code>monitor.getDropResult()</code> 的返回值。<br> 这个方法是处理数据变化的好地方。</td></tr><tr><td align="left">canDrag</td><td>否</td><td align="left"><code>boolean | (monitor: DragSourceMonitor) =&gt; boolean</code></td><td align="left">你可以使用它来指定当前是否允许拖动。默认为 <code>true</code>。<br> 如果您想禁用基于某些条件的拖动，则指定一个函数会很便捷。<br> 注意：你不能在这个方法内部调用 <code>monitor.canDrag()</code>。</td></tr><tr><td align="left">isDragging</td><td>否</td><td align="left"><code>boolean | (monitor: DragSourceMonitor) =&gt; boolean</code></td><td align="left">默认情况下，只有发起拖动操作的拖动源才被认为是拖动的。<br> 你可以通过定义自定义一个 <code>isDragging</code> 方法来覆盖此行为。<br> 它可能会返回类似 <code>props.id === monitor.getItem().id</code>。<br> 注意：你不能在这个方法内部调用 <code>monitor.isDragging()</code>。</td></tr></tbody></table><h2 id="useDrop"><a href="#useDrop" class="headerlink" title="useDrop"></a><a href="https://www.vue3-dnd.com/guide/composition/use-drop.html#usedrop">useDrop</a></h2><p><code>useDrop</code> 函数提供了一种将你的组件作为 <strong>放置目标</strong> 连接到 DnD 的方法。它接收一个 <code>Specification</code>，你可以通过 <code>accpet</code> 指定允许放置的类型，通过 <code>item</code> 表示拖动源的数据，通过 <code>collect</code> 获取拖拽状态等等。</p><p><code>useDrop</code> 返回了两个值：<code>collect</code> 函数的返回值，<code>dropTarget</code> 的连接器函数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">import</span> &#123; useDrop &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue3-dnd&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> [collectedProps, drop] = <span class="hljs-title function_">useDrop</span>(<span class="hljs-function">() =&gt;</span> (&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">accept</span>: [<span class="hljs-string">&#x27;BOX&#x27;</span>]</span><br><span class="language-javascript">  &#125;))</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:ref</span>=<span class="hljs-string">&quot;drop&quot;</span>&gt;</span>Drop Target<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a><a href="https://www.vue3-dnd.com/guide/composition/use-drop.html#%E5%8F%82%E6%95%B0">参数</a></h3><p><code>useDrop</code> 的参数可以是一个 <code>Specification</code> 对象，也可以是一个函数，返回一个 <code>Specification</code> 对象，有关 <code>Specification</code> 的详细信息，请参考 <a href="https://www.vue3-dnd.com/guide/composition/use-drop.html#specification-%E5%AF%B9%E8%B1%A1">Specification</a>。</p><h3 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a><a href="https://www.vue3-dnd.com/guide/composition/use-drop.html#%E8%BF%94%E5%9B%9E%E5%80%BC">返回值</a></h3><p><code>useDrop</code> 返回一个数组，包含两个值：<code>collect</code> 函数的返回值，<code>dropTarget</code> 的连接器函数</p><ul><li><p><code>[0] - Collected Props</code></p>  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-title class_">Ref</span>&lt;<span class="hljs-built_in">object</span>&gt;<br></code></pre></td></tr></table></figure><ul><li>它是一个 <code>Ref</code> 对象，它的 <code>value</code> 指向 <code>collect</code> 函数的返回值，如果没有定义 <code>collect</code> 函数，它的 <code>value</code> 就是一个空对象</li></ul></li><li><p><code>[1] - DragTarget Connector</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-title class_">Ref</span>&lt;<span class="hljs-function">(<span class="hljs-params">el: Ref&lt;HTMLElement&gt; | HTMLElement</span>) =&gt;</span> <span class="hljs-title class_">HTMLElement</span>&gt;<br></code></pre></td></tr></table></figure><ul><li><p>放置目标的连接器函数。<strong>它必须被调用</strong>，并且传入一个 <code>Ref&lt;HTMLElement&gt; | HTMLElement</code> 的可被拖放 DOM 元素；</p></li><li><p>第二个参数是一个 options 对象，与 Specification 对象的 options 一致</p></li></ul></li></ul><h3 id="Specification-对象-1"><a href="#Specification-对象-1" class="headerlink" title="Specification 对象"></a><a href="https://www.vue3-dnd.com/guide/composition/use-drop.html#specification-%E5%AF%B9%E8%B1%A1">Specification 对象</a></h3><p>在了解 <code>Specification</code> 对象的基本用法之前，你可能需要先了解一下 <a href="https://www.vue3-dnd.com/guide/monitors/drop-target-monitor.html">DropTargetMonitor</a> 对象。</p><table><thead><tr><th align="left">Key</th><th>必填</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td align="left">accept</td><td>是</td><td><code>string | symbol | string[] | symbol[]</code></td><td>此放置目标只会对 <a href="https://www.vue3-dnd.com/guide/composition/use-drag.html">指定类型的拖动源</a> 做出反应。</td></tr><tr><td align="left">collect</td><td>否</td><td><code>(monitor: DropTargetMonitor) =&gt; CollectedProps</code></td><td>一个收集器的函数。<br> 它应该返回一个普通对象并成为 <code>useDrop</code> 返回值中的第一个项。</td></tr><tr><td align="left">options</td><td>否</td><td><code>object</code></td><td>目前没什么用。</td></tr><tr><td align="left">drop</td><td>否</td><td><code>(item: object, monitor: DropTargetMonitor) =&gt; (void | Record&lt;string, any&gt;)</code></td><td>当拖拽元素放置在目标上时调用。你可以不返回任何东西，也可以返回一个普通对象。<br> 如果你返回了一个对象，它将成为 <code>dropResult</code>, 并且在 <code>drag</code> 的 <code>end</code> 方法中，可以通过 <code>monitor.getDropResult()</code> 获取到它。<br> 如果你想根据不同的放置目标执行不同的操作，这将是一个不错的选择。<br> 如果你的放置目标是嵌套的，那你可以通过 <code>monitor.didDrop()</code> 和 <code>monitor.getDropResult()</code> 来检查嵌套目标是否已经处理。 这个方法和 <code>drag</code> 的 <code>end</code> 方法，都是处理数据变化的好地方。<br> 如果 <code>canDrop()</code> 方法返回 <code>false</code>，则不会调用此方法。</td></tr><tr><td align="left">hover</td><td>否</td><td><code>(item: object, monitor: DropTargetMonitor) =&gt; void</code></td><td>当拖拽组件经过组件上时调用该方法。 你可以通过检查 <code>monitor.isOver(&#123; shallow: true &#125;)</code> 来检查悬停是仅发生在当前目标上还是发生在内部的嵌套目标上。 和 <code>drop()</code> 方法不同的是：即使 <code>canDrop()</code> 返回了 <code>false</code>，该方法也会被调用。 你可以通过 <code>monitor.canDrop()</code> 来确认并避免这种情况。</td></tr><tr><td align="left">canDrop</td><td>否</td><td><code>(item: DragObject, monitor: DropTargetMonitor&lt;DragObject, DropResult&gt;) =&gt; boolean</code></td><td>用于指定放置目标是否能够接受此拖拽组件。<br> 如果你希望总是允许，请忽略该方法。<br> 如果你想基于 <code>props</code> 或 <code>monitor.getItem()</code> 中的某些断言禁用放置，就可以使用它。<br> 注意：你不能在这个方法中调用 <code>monitor.canDrop()</code>。</td></tr></tbody></table><h2 id="useDragLayer"><a href="#useDragLayer" class="headerlink" title="useDragLayer"></a><a href="https://www.vue3-dnd.com/guide/composition/use-drag-layer.html#usedraglayer">useDragLayer</a></h2><p><code>useDragLayer</code> 函数提供了一种将你的组件作为 <strong>拖动层</strong> 连接到 DnD 的方法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">import</span> &#123; useDragLayer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue3-dnd&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> collectedProps = <span class="hljs-title function_">useDragLayer</span>(<span class="hljs-function"><span class="hljs-params">monitor</span> =&gt;</span> (&#123; </span><br><span class="language-javascript">    <span class="hljs-attr">item</span>: monitor.<span class="hljs-title function_">getItem</span>(),</span><br><span class="language-javascript">  &#125;))</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a><a href="https://www.vue3-dnd.com/guide/composition/use-drag-layer.html#%E5%8F%82%E6%95%B0">参数</a></h3><p><code>useDragLayer</code> 的参数是一个 <code>collect</code> 收集函数，它应该返回一个普通对象，并使你在组件中使用。</p><p><code>collect</code> 收集函数的参数是一个 <a href="https://www.vue3-dnd.com/guide/monitors/drag-layer-monitor.html">DragLayerMonitor</a> 对象，它提供了一些监视器的方法，以便你可以获取监视器的状态。<code>collect</code> 函数的类型如下:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts">(<span class="hljs-attr">monitor</span>: <span class="hljs-title class_">DragLayerMonitor</span>) =&gt; (<span class="hljs-built_in">void</span> | <span class="hljs-built_in">object</span>)<br></code></pre></td></tr></table></figure><h3 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a><a href="https://www.vue3-dnd.com/guide/composition/use-drag-layer.html#%E8%BF%94%E5%9B%9E%E5%80%BC">返回值</a></h3><p><code>useDragLayer</code> 返回一个 <code>Ref</code> 对象，它是 <code>collect</code> 函数的返回值。</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-title class_">Collected</span> <span class="hljs-title class_">Props</span> - <span class="hljs-title class_">Ref</span> &lt;<span class="hljs-built_in">object</span>&gt;<br></code></pre></td></tr></table></figure><ul><li>它是一个<code>Ref</code>对象，它的<code>value</code>指向<code>collect</code>函数的返回值。</li></ul>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue自由拖拽vue3-dnd(三)</title>
    <link href="/2024/02/02/vue3-dnd/vue%E8%87%AA%E7%94%B1%E6%8B%96%E6%8B%BDvue3-dnd(%E4%B8%89)/"/>
    <url>/2024/02/02/vue3-dnd/vue%E8%87%AA%E7%94%B1%E6%8B%96%E6%8B%BDvue3-dnd(%E4%B8%89)/</url>
    
    <content type="html"><![CDATA[<h1 id="vue-自由拖拽vue3-dnd-三-组件"><a href="#vue-自由拖拽vue3-dnd-三-组件" class="headerlink" title="vue 自由拖拽vue3-dnd(三)-组件"></a>vue 自由拖拽vue3-dnd(三)-组件</h1><p>接下来就进入正题了，该如何使用，请看以下说明：</p><h2 id="DndProvider"><a href="#DndProvider" class="headerlink" title="DndProvider"></a><a href="https://www.vue3-dnd.com/guide/components/dnd-provider.html#dndprovider">DndProvider</a></h2><p><code>DndProvider</code> 组件为您的应用程序提供 Vue3 DnD 功能。它必须通过<code>backend</code>这个prop注入一个Backend。</p><p>一般我们在App.vue文件中使用它。</p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a><a href="https://www.vue3-dnd.com/guide/components/dnd-provider.html#%E7%94%A8%E6%B3%95">用法</a></h3><h4 id="PC-端"><a href="#PC-端" class="headerlink" title="PC 端"></a><a href="https://www.vue3-dnd.com/guide/components/dnd-provider.html#pc%E7%AB%AF">PC 端</a></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">DndProvider</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue3-dnd&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">HTML5Backend</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dnd-html5-backend&#x27;</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">DndProvider</span> <span class="hljs-attr">:backend</span>=<span class="hljs-string">&quot;HTML5Backend&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Your Drag-and-Drop Application --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">DndProvider</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a><a href="https://www.vue3-dnd.com/guide/components/dnd-provider.html#%E7%A7%BB%E5%8A%A8%E7%AB%AF">移动端</a></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">DndProvider</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue3-dnd&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">TouchBackend</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dnd-touch-backend&#x27;</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">DndProvider</span> <span class="hljs-attr">:backend</span>=<span class="hljs-string">&quot;TouchBackend&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Your Drag-and-Drop Application --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">DndProvider</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Props"><a href="#Props" class="headerlink" title="Props"></a><a href="https://www.vue3-dnd.com/guide/components/dnd-provider.html#props">Props</a></h3><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>是否必填</th></tr></thead><tbody><tr><td>backend</td><td>一个 React DnD 的 Backend</td><td>Backend</td><td>是</td></tr><tr><td>context</td><td>用于配置 Backend 的上下文对象; 这取决于 Backend 实现。</td><td>object</td><td>否</td></tr><tr><td>options</td><td>用于配置 Backend 的选项对象; 这取决于 Backend 实现。</td><td>object</td><td>否</td></tr></tbody></table><h2 id="DragPreviewImage"><a href="#DragPreviewImage" class="headerlink" title="DragPreviewImage"></a><a href="https://www.vue3-dnd.com/guide/components/drag-preview-image.html#dragpreviewimage">DragPreviewImage</a></h2><p>将 HTML Image 元素呈现为拖动预览的组件。</p><h3 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a><a href="https://www.vue3-dnd.com/guide/components/drag-preview-image.html#%E7%94%A8%E6%B3%95">用法</a></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">DragPreviewImage</span>, useDrag &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue3-dnd&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> [collect, drag, dragPreview] = <span class="hljs-title function_">useDrag</span>(<span class="hljs-function">() =&gt;</span> (&#123;</span><br><span class="language-javascript">  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;Box&#x27;</span>,</span><br><span class="language-javascript">&#125;))</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">DragPreviewImage</span> <span class="hljs-attr">:connect</span>=<span class="hljs-string">&quot;dragPreview&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;house_dragged.png&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:ref</span>=<span class="hljs-string">&quot;drag&quot;</span>&gt;</span>🏠<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Props-1"><a href="#Props-1" class="headerlink" title="Props"></a><a href="https://www.vue3-dnd.com/guide/components/drag-preview-image.html#props">Props</a></h3><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>是否必填</th></tr></thead><tbody><tr><td>src</td><td>图片的src</td><td>string</td><td>是</td></tr><tr><td>connect</td><td><code>dragPreview</code>连接器</td><td>function</td><td>是</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue自由拖拽vue3-dnd(二)</title>
    <link href="/2024/01/31/vue3-dnd/vue%E8%87%AA%E7%94%B1%E6%8B%96%E6%8B%BDvue3-dnd(%E4%BA%8C)/"/>
    <url>/2024/01/31/vue3-dnd/vue%E8%87%AA%E7%94%B1%E6%8B%96%E6%8B%BDvue3-dnd(%E4%BA%8C)/</url>
    
    <content type="html"><![CDATA[<h1 id="vue-自由拖拽vue3-dnd-二-基础"><a href="#vue-自由拖拽vue3-dnd-二-基础" class="headerlink" title="vue 自由拖拽vue3-dnd(二)-基础"></a>vue 自由拖拽vue3-dnd(二)-基础</h1><h2 id="react-dnd-基础概念"><a href="#react-dnd-基础概念" class="headerlink" title="react-dnd 基础概念"></a>react-dnd 基础概念</h2><h3 id="项目-Items-和-类型-Types"><a href="#项目-Items-和-类型-Types" class="headerlink" title="项目(Items) 和 类型(Types)"></a>项目(Items) 和 类型(Types)</h3><ul><li>React DnD <strong>使用数据</strong> 而不是视图作为拖拽实施。</li><li>在屏幕上拖动某些东西时，称为正在拖动某种类型的项目。</li><li>项目是描述被拖动内容的 <strong>纯 JavaScript 对象</strong>。</li><li>类型是一个字符串（或一个符号），用于 <strong>唯一标识</strong> 应用程序中的一整类项目。</li><li>类型很有用，因为随着项目的庞大，你可能希望更多的东西可拖动，但你不一定希望所有现有的放置目标突然可以接收新项目的放置。<strong>类型让你可以指定拖放源和拖放目标</strong>。</li></ul><h3 id="监视器-Monitors"><a href="#监视器-Monitors" class="headerlink" title="监视器(Monitors)"></a>监视器(Monitors)</h3><p>拖放本质上是有状态的。拖动操作正在进行中，或者没有。要么有当前类型和当前项目，要么没有。这种状态必须存在于某个地方。</p><p>对于每个需要跟踪拖放状态的组件，您可以定义一个收集函数，从监视器中提取状态。</p><p>假设你想在拖动棋子的时候突出显示允许放置的 Cell 单元格，组件 Cell 的收集函数可能如下所示：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> [collect, drop] = <span class="hljs-title function_">useDrop</span>(&#123;<br>  <span class="hljs-attr">accept</span>: <span class="hljs-string">&#x27;Cell&#x27;</span>,<br>  <span class="hljs-attr">collect</span>: <span class="hljs-function"><span class="hljs-params">monitor</span> =&gt;</span> (&#123;<br>    <span class="hljs-attr">canDrop</span>: monitor.<span class="hljs-title function_">canDrop</span>(),<br>    <span class="hljs-attr">hovered</span>: monitor.<span class="hljs-title function_">isOver</span>(),<br>  &#125;),<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>canDrop 表示拖动元素可以放置到当前元素，hovered 表示拖动元素正在当前元素上</p><h3 id="拖拽源-Drag-Sources-和-拖放目标-Drop-Targets"><a href="#拖拽源-Drag-Sources-和-拖放目标-Drop-Targets" class="headerlink" title="拖拽源(Drag Sources) 和 拖放目标 (Drop Targets)"></a>拖拽源(Drag Sources) 和 拖放目标 (Drop Targets)</h3><ul><li>使用拖拽源 dragSource 来表示拖拽的元素</li><li>使用拖放目标 drop 来表示目标接收拖拽元素</li></ul><h3 id="Backend"><a href="#Backend" class="headerlink" title="Backend"></a>Backend</h3><ul><li>Backend 抽象出了浏览器的差异并处理原生 DOM 事件。</li><li>所有 Backend 所做的就是将 DOM 事件转换为 React DnD 可以处理的内部 Redux 操作。</li><li>受益于 React DnD 的设计，vue3-dnd 直接采用它的 HTML5 Backend , Touch Backend 和 Test Backend ，甚至是一些自定义的 Backend</li></ul><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>相信您已经理解了 React DnD 的一部分核心概念, 加详细的介绍可以参考 <a href="https://react-dnd.github.io/react-dnd/docs/overview">React DnD 概述</a></p><div class="note note-success">            <p><strong>后续我会讲一些基础的用法，尽请期待</strong></p>          </div>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue自由拖拽vue3-dnd(一)</title>
    <link href="/2024/01/31/vue3-dnd/vue%E8%87%AA%E7%94%B1%E6%8B%96%E6%8B%BDvue3-dnd(%E4%B8%80)/"/>
    <url>/2024/01/31/vue3-dnd/vue%E8%87%AA%E7%94%B1%E6%8B%96%E6%8B%BDvue3-dnd(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<h1 id="vue自由拖拽vue3-dnd-一-概述"><a href="#vue自由拖拽vue3-dnd-一-概述" class="headerlink" title="vue自由拖拽vue3-dnd(一)-概述"></a>vue自由拖拽vue3-dnd(一)-概述</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>工作中碰到需要频繁使用拖拽功能，调研了vue3的dragable发现功能还是太简单了，像是一个简单的拖拽排序库，不是很满足需求。这里我要说react的拖拽库就有很多选择，这点确实vue3还需要努力。既然vue3找不到，那有没有react移植过来的呢？我一搜，还真有！就是今天的主角<a href="https://github.com/hcg1023/vue3-dnd">vue3-dnd</a>。</p><p>这个库是react的<a href="https://github.com/react-dnd/react-dnd">React DnD</a>的vue移植版本。</p><h2 id="Vue3-DnD"><a href="#Vue3-DnD" class="headerlink" title="Vue3 DnD"></a>Vue3 DnD</h2><p><a href="https://github.com/hcg1023/vue3-dnd">vue3-dnd</a>是基于React DnD的核心程序实现的一组Vue composition-api，它提供了尽量与React DnD保持一致的api，便于我们去构建一个复杂、自由的拖拽功能。下面将介绍一下它的基础信息。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装</span><br>pnpm install vue3-dnd react-dnd-html5-backend<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或者</span><br>npm install vue3-dnd react-dnd-html5-backend<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或者</span><br>yarn add vue3-dnd react-dnd-html5-backend<br></code></pre></td></tr></table></figure><p>react-dnd-html5-backend 是一个React DnD 的插件，它提供了一个HTML5的拖放支持；你也可以使用react-dnd-touch-backend 提供触摸拖放支持。</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><h4 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h4><p>基于Vue的组合式API，你可以在任何组件中使用拖拽。</p><h4 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h4><p>基于Vue的双向数据绑定，你可以在数据更新时自动更新UI。</p><h4 id="支持Vue2和Vue3"><a href="#支持Vue2和Vue3" class="headerlink" title="支持Vue2和Vue3"></a>支持Vue2和Vue3</h4><p>同时支持Vue2和Vue3两个版本</p><h5 id="支持Vue2"><a href="#支持Vue2" class="headerlink" title="支持Vue2"></a>支持Vue2</h5><p>由于Vue2的一些特性，在Vue2中使用还有一点细微的差别：</p><ol><li>在Vue&lt;&#x3D;2.6中使用，需要先安装@vue&#x2F;composition-api</li><li>由于Vue2不支持dom ref函数，所以我们必须额外定义一个ref，用于承载dom节点，并将这个ref传递给我们的connect函数。</li></ol><p>以下是一个示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span><br><span class="hljs-tag">        <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;element&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;Box&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">:data-testid</span>=<span class="hljs-string">&quot;`box-$&#123;name&#125;`&quot;</span></span><br><span class="hljs-tag">    &gt;</span><br>        &#123;&#123; name &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; useDrag &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue3-dnd&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vue/composition-api&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">interface <span class="hljs-title class_">DropResult</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">name</span>: string</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> props = defineProps&lt;&#123; <span class="hljs-attr">name</span>: string &#125;&gt;()</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> [collect, drag, dragPreview] = <span class="hljs-title function_">useDrag</span>(<span class="hljs-function">() =&gt;</span> (&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;BOX&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">item</span>: &#123; <span class="hljs-attr">name</span>: props.<span class="hljs-property">name</span> &#125;,</span><br><span class="language-javascript">&#125;))</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> element = <span class="hljs-title function_">ref</span>()</span><br><span class="language-javascript"><span class="hljs-title function_">drag</span>(element)</span><br><span class="language-javascript"><span class="hljs-comment">// 可选的，默认与drag一致</span></span><br><span class="language-javascript"><span class="hljs-comment">// dragPreview(element)</span></span><br><span class="language-javascript"><span class="hljs-comment">// 如果是useDrop，也是一样的</span></span><br><span class="language-javascript"><span class="hljs-comment">// drop(element)</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="扩展和测试"><a href="#扩展和测试" class="headerlink" title="扩展和测试"></a>扩展和测试</h4><p>受益于React DnD的backend设计，你可以自定义一个DnD backend，并且可以使用 react-dnd-test-backend 测试你的拖拽组件。</p><div class="note note-success">            <p><strong>后续我会讲一些react-dnd的基础概念，尽请期待</strong></p>          </div>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建一个博客</title>
    <link href="/2023/09/04/hexo/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/09/04/hexo/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p><a href="https://link.juejin.cn/?target=https://hexo.io/zh-cn/docs/" title="https://hexo.io/zh-cn/docs/">Hexo</a>是一个开源的静态博客框架，具有快速、简洁和高效的特点。<code>Hexo</code> 使用 <code>Markdown</code>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 <code>GitHub</code>是一个广泛用于代码托管和版本控制的平台，提供了免费的 <code>GitHub Pages</code>功能，可以用于托管个人博客。结合 <code>Hexo</code>和 <code>GitHub</code>，可以免费搭建个人博客，并享受其强大的功能和灵活的定制性。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>相信想搞博客的人，应该最基本的git，node，github账号应该都会吧，这里就省略了。</p><h1 id="安装和配置Hexo"><a href="#安装和配置Hexo" class="headerlink" title="安装和配置Hexo"></a>安装和配置Hexo</h1><p>全局安装 <code>hexo</code></p><blockquote><p>mac用户记得sudo</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装</span><br>npm install -g hexo-cli<br><span class="hljs-comment"># 查看是否成功</span><br>hexo version<br></code></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>安装 <code>Hexo</code> 完成后，执行下列命令，<code>Hexo</code> 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init &lt;folder&gt; <br><span class="hljs-built_in">cd</span> &lt;folder&gt;<br>npm install<br></code></pre></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">.<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── <span class="hljs-built_in">source</span><br>|   ├── _drafts<br>|   └── _posts<br>└── themes<br><br></code></pre></td></tr></table></figure><ul><li><code>_config.yml</code>：站的 配置 信息，您可以在此配置大部分的参数。</li><li><code>package.json</code>：应用程序的信息。<code>EJS</code>, <code>Stylus</code> 和 <code>Markdown renderer</code> 已默认安装。</li><li><code>scaffolds</code>：模版文件夹。当新建文章时，<code>Hexo</code> 会根据 <code>scaffold</code> 来建立文件。</li><li>source：资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 &#x2F; 文件夹和隐藏的文件将会被忽略。<code>Markdown</code> 和 <code>HTML</code> 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</li><li><code>themes</code>：主题 文件夹。<code>Hexo</code> 会根据主题来生成静态页面。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关于useWebsocket的思考</title>
    <link href="/2023/09/01/vueuse/%E5%85%B3%E4%BA%8EuseWebsocket%E7%9A%84bug/"/>
    <url>/2023/09/01/vueuse/%E5%85%B3%E4%BA%8EuseWebsocket%E7%9A%84bug/</url>
    
    <content type="html"><![CDATA[<p>今天来讲讲useWebsocket的bug</p><h1 id="关于vueuse中useWebsocket的问题"><a href="#关于vueuse中useWebsocket的问题" class="headerlink" title="关于vueuse中useWebsocket的问题"></a>关于vueuse中useWebsocket的问题</h1><h2 id="发现bug背景"><a href="#发现bug背景" class="headerlink" title="发现bug背景"></a>发现bug背景</h2><p>由于项目比较复杂，websockt不能一直连着，而且当某个字段变了之后，需要将原来的关闭并且新开一个socket。然后我发现如果url改变了，会有一条socket一直连着，也不能关闭也不能操作。</p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>经过我的多次测试以及查看源代码，我发现应该是 <code>autoReconnect： true</code>，所以在url改变时他会触发重新链接，但是由于url变了，所以那条socket会一直连着，无法关闭。</p><p>我已经向vueuse提交了issues，不知道anft大神会不会看到我提交的bug并修复，有点小兴奋。</p><p>最后附上issues地址： <a href="https://github.com/vueuse/vueuse/issues/3364">useWebsocket</a></p><h1 id="2024-1-30-最新结论"><a href="#2024-1-30-最新结论" class="headerlink" title="2024.1.30 最新结论"></a>2024.1.30 最新结论</h1><p>在设置 <code>immediate</code>为 <code>false</code>并且 <code>autoReconnect</code>为 <code>true</code>之后，如果url是ref或computed的，在改变之后不会先将之前的ws先关闭再开启新的ws，这就导致这样设置之后ws会越来越多，我提交了pr修复此bug，但至今仍未合并。可以看下我是如何修复的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title function_">watch</span>(urlRef, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (immediate)<br>      <span class="hljs-title function_">open</span>()<br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-title function_">close</span>()<br>  &#125;, &#123; <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span> &#125;)<br><br></code></pre></td></tr></table></figure><p>原本的代码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">if</span> (immediate)<br>    <span class="hljs-title function_">watch</span>(urlRef, open, &#123; <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span> &#125;)<br></code></pre></td></tr></table></figure><p>附上pr地址： <a href="https://github.com/vueuse/vueuse/pull/3676">useWebsocket</a></p>]]></content>
    
    
    <categories>
      
      <category>vueuse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>vueuse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>useSound问题</title>
    <link href="/2023/09/01/vueuse/useSound%E8%B8%A9%E5%9D%91%E8%AE%B0/"/>
    <url>/2023/09/01/vueuse/useSound%E8%B8%A9%E5%9D%91%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>还记的那天，产品经理给我提了个需求，要我做一个组件。要求也是蛮常规的，就是做一个声音选择的下拉单选框，选中啥放啥声音（<em>这里还有一个，就是需要上上传功能，但后续讨论只需要配置默认声音，提供选择，就没做了。做起来也不麻烦，只需要上传之后，返回一个可下载的链接使用useObjectUrl()钩子</em>）。心想这不so easy分分钟就给你搞定。当然，你觉得一件事很简单的时候，他就越容易出问题。</p><h1 id="问题阐述"><a href="#问题阐述" class="headerlink" title="问题阐述"></a>问题阐述</h1><p>由于我非常喜欢vueuse，所以一接到这个需求的时候，我就想到了vueuse的useSound。既然如此那就开干。</p><ul><li>setup 部分</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> selectValue = ref&lt;<span class="hljs-built_in">number</span> | <span class="hljs-literal">undefined</span>&gt;()<br><span class="hljs-keyword">const</span> &#123; play &#125; = <span class="hljs-title function_">useSound</span>(selectValue)<br></code></pre></td></tr></table></figure><ul><li>template部分</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selectValue&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>结果我把网页开打一看，好家伙，啥效果都没有，我寻思不可能吧，这么大个库也能出bug?</p><p>让我来瞅瞅哪里出问题了,  先来看看这个函数的ts类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">declare</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useSound</span>(<span class="hljs-params">url: MaybeRef&lt;<span class="hljs-built_in">string</span>&gt;, &#123; volume, playbackRate, soundEnabled, interrupt, autoplay, onload, ...delegated &#125;?: ComposableOptions</span>): <span class="hljs-title class_">ReturnedValue</span>;<br></code></pre></td></tr></table></figure><p>嗯….只能传非空的url，然后他的源码并没有对非空url进行处理。我们实际开发者，肯定会遇到空值的情况，所以对我来说这个函数不太能符合我的需求。</p><p>怎么办呢。。。我灵机一动，我把它的源码拿下来自己改改不就行了。</p><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><p>由于我现在都使用vue3来写，所以就没考虑兼容vue2，需要的童鞋自己使用vue-demi实现下把</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!-- index.<span class="hljs-property">js</span> --&gt;<br><span class="hljs-keyword">import</span> howler <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;howler&#x27;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">useSound</span>(<span class="hljs-params">url, &#123; volume = <span class="hljs-number">1</span>, playbackRate = <span class="hljs-number">1</span>, soundEnabled = <span class="hljs-literal">true</span>, interrupt = <span class="hljs-literal">false</span>, autoplay = <span class="hljs-literal">false</span>, onload, ...delegated &#125; = &#123;&#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title class_">HowlConstructor</span> = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-keyword">const</span> isPlaying = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">const</span> duration = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-keyword">const</span> sound = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-keyword">if</span>(<span class="hljs-title function_">unref</span>(url)) &#123;<br>      sound.<span class="hljs-property">value</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HowlConstructor</span>.<span class="hljs-title function_">value</span>(&#123;<br>      <span class="hljs-attr">src</span>: <span class="hljs-title function_">unref</span>(url),<br>      <span class="hljs-attr">volume</span>: <span class="hljs-title function_">unref</span>(volume),<br>      <span class="hljs-attr">rate</span>: <span class="hljs-title function_">unref</span>(playbackRate),<br>      <span class="hljs-attr">onload</span>: handleLoad,<br>      ...delegated<br>    &#125;);<br>  &#125;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleLoad</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> onload === <span class="hljs-string">&quot;function&quot;</span>)<br>      onload.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>);<br>    duration.<span class="hljs-property">value</span> = (duration.<span class="hljs-property">value</span> || sound.<span class="hljs-property">value</span>?.<span class="hljs-title function_">duration</span>() || <span class="hljs-number">0</span>) * <span class="hljs-number">1e3</span>;<br>    <span class="hljs-keyword">if</span> (autoplay === <span class="hljs-literal">true</span>) &#123;<br>      isPlaying.<span class="hljs-property">value</span> = <span class="hljs-literal">true</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-title function_">watch</span>(<br>    <span class="hljs-function">() =&gt;</span> [<span class="hljs-title function_">unref</span>(url)],<br>    <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-title function_">unref</span>(url)) &#123;<br>        sound.<span class="hljs-property">value</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HowlConstructor</span>.<span class="hljs-title function_">value</span>(&#123;<br>          <span class="hljs-attr">src</span>: <span class="hljs-title function_">unref</span>(url),<br>          <span class="hljs-attr">volume</span>: <span class="hljs-title function_">unref</span>(volume),<br>          <span class="hljs-attr">rate</span>: <span class="hljs-title function_">unref</span>(playbackRate),<br>          <span class="hljs-attr">onload</span>: handleLoad,<br>          ...delegated<br>        &#125;);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        sound.<span class="hljs-property">value</span> = <span class="hljs-keyword">void</span> <span class="hljs-number">0</span><br>      &#125;<br>    &#125;<br>  );<br>  <span class="hljs-title function_">watch</span>(<br>    <span class="hljs-function">() =&gt;</span> [<span class="hljs-title function_">unref</span>(volume), <span class="hljs-title function_">unref</span>(playbackRate)],<br>    <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (sound.<span class="hljs-property">value</span>) &#123;<br>        sound.<span class="hljs-property">value</span>.<span class="hljs-title function_">volume</span>(<span class="hljs-title function_">unref</span>(volume));<br>        sound.<span class="hljs-property">value</span>.<span class="hljs-title function_">rate</span>(<span class="hljs-title function_">unref</span>(playbackRate));<br>      &#125;<br>    &#125;<br>  );<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">play</span> = (<span class="hljs-params">options</span>) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> options === <span class="hljs-string">&quot;undefined&quot;</span>) &#123;<br>      options = &#123;&#125;;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!sound.<span class="hljs-property">value</span> || !soundEnabled &amp;&amp; !options.<span class="hljs-property">forceSoundEnabled</span>) &#123;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (interrupt) &#123;<br>      sound.<span class="hljs-property">value</span>.<span class="hljs-title function_">stop</span>();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (options.<span class="hljs-property">playbackRate</span>) &#123;<br>      sound.<span class="hljs-property">value</span>.<span class="hljs-title function_">rate</span>(options.<span class="hljs-property">playbackRate</span>);<br>    &#125;<br>    sound.<span class="hljs-property">value</span>.<span class="hljs-title function_">play</span>(options.<span class="hljs-property">id</span>);<br>    sound.<span class="hljs-property">value</span>.<span class="hljs-title function_">once</span>(<span class="hljs-string">&quot;end&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (sound.<span class="hljs-property">value</span> &amp;&amp; sound.<span class="hljs-property">value</span> &amp;&amp; !sound.<span class="hljs-property">value</span>.<span class="hljs-title function_">playing</span>()) &#123;<br>        isPlaying.<span class="hljs-property">value</span> = <span class="hljs-literal">false</span>;<br>      &#125;<br>    &#125;);<br>    isPlaying.<span class="hljs-property">value</span> = <span class="hljs-literal">true</span>;<br>  &#125;;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">stop</span> = (<span class="hljs-params">id</span>) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (!sound.<span class="hljs-property">value</span>) &#123;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    sound.<span class="hljs-property">value</span>.<span class="hljs-title function_">stop</span>(<span class="hljs-keyword">typeof</span> id === <span class="hljs-string">&quot;number&quot;</span> ? id : <span class="hljs-keyword">void</span> <span class="hljs-number">0</span>);<br>    isPlaying.<span class="hljs-property">value</span> = <span class="hljs-literal">false</span>;<br>  &#125;;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">pause</span> = (<span class="hljs-params">id</span>) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (!sound.<span class="hljs-property">value</span>) &#123;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    sound.<span class="hljs-property">value</span>.<span class="hljs-title function_">pause</span>(<span class="hljs-keyword">typeof</span> id === <span class="hljs-string">&quot;number&quot;</span> ? id : <span class="hljs-keyword">void</span> <span class="hljs-number">0</span>);<br>    isPlaying.<span class="hljs-property">value</span> = <span class="hljs-literal">false</span>;<br>  &#125;;<br>  <span class="hljs-keyword">const</span> returnedValue = &#123;<br>    play,<br>    sound,<br>    isPlaying,<br>    duration,<br>    pause,<br>    stop<br>  &#125;;<br>  <span class="hljs-keyword">return</span> returnedValue;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&lt;!-- index.<span class="hljs-property">d</span>.<span class="hljs-property">ts</span> --&gt;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">HowlOptions</span>, <span class="hljs-title class_">Howl</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;howler&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Ref</span>, <span class="hljs-title class_">ComputedRef</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">MaybeRef</span>&lt;T&gt; = T | <span class="hljs-title class_">Ref</span>&lt;T&gt; | <span class="hljs-title class_">ComputedRef</span>&lt;T&gt;;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">SpriteMap</span> &#123;<br>    [<span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span>]: [<span class="hljs-built_in">number</span>, <span class="hljs-built_in">number</span>];<br>&#125;<br><span class="hljs-keyword">type</span> <span class="hljs-title class_">ComposableOptions</span> = &#123;<br>    volume?: <span class="hljs-title class_">MaybeRef</span>&lt;<span class="hljs-built_in">number</span>&gt;;<br>    playbackRate?: <span class="hljs-title class_">MaybeRef</span>&lt;<span class="hljs-built_in">number</span>&gt;;<br>    interrupt?: <span class="hljs-built_in">boolean</span>;<br>    soundEnabled?: <span class="hljs-built_in">boolean</span>;<br>    autoplay?: <span class="hljs-built_in">boolean</span>;<br>    sprite?: <span class="hljs-title class_">SpriteMap</span>;<br>    onload?: <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">void</span>;<br>&#125; &amp; <span class="hljs-title class_">Omit</span>&lt;<span class="hljs-title class_">HowlOptions</span>, <span class="hljs-string">&#x27;src&#x27;</span>&gt;;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">PlayOptions</span> &#123;<br>    id?: <span class="hljs-built_in">number</span>;<br>    forceSoundEnabled?: <span class="hljs-built_in">boolean</span>;<br>    playbackRate?: <span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-keyword">type</span> <span class="hljs-title class_">PlayFunction</span> = <span class="hljs-function">(<span class="hljs-params">options?: PlayOptions</span>) =&gt;</span> <span class="hljs-built_in">void</span>;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ReturnedValue</span> &#123;<br>    <span class="hljs-attr">play</span>: <span class="hljs-title class_">PlayFunction</span>;<br>    <span class="hljs-attr">sound</span>: <span class="hljs-title class_">Ref</span>&lt;<span class="hljs-title class_">Howl</span> | <span class="hljs-literal">null</span>&gt;;<br>    <span class="hljs-attr">stop</span>: <span class="hljs-function">(<span class="hljs-params">id?: <span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">void</span>;<br>    <span class="hljs-attr">pause</span>: <span class="hljs-function">(<span class="hljs-params">id?: <span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">void</span>;<br>    <span class="hljs-attr">isPlaying</span>: <span class="hljs-title class_">Ref</span>&lt;<span class="hljs-built_in">boolean</span>&gt;;<br>    <span class="hljs-attr">duration</span>: <span class="hljs-title class_">Ref</span>&lt;<span class="hljs-built_in">number</span> | <span class="hljs-literal">null</span>&gt;;<br>&#125;<br><br><span class="hljs-keyword">declare</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useSound</span>(<span class="hljs-params">url: MaybeRef&lt;<span class="hljs-built_in">string</span> | <span class="hljs-literal">undefined</span>&gt;, &#123; volume, playbackRate, soundEnabled, interrupt, autoplay, onload, ...delegated &#125;?: ComposableOptions</span>): <span class="hljs-title class_">ReturnedValue</span>;<br><br><span class="hljs-keyword">export</span> &#123; useSound &#125;;<br><br></code></pre></td></tr></table></figure><p>把这两段代码自己封装下hook，就可以在项目中使用啦，亲测好用</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>虽然有些需求看上去简单，实现起来也简单，但里面还是有坑的，必须小心别踩坑了。</p><p>最后想感叹句，站在巨人的肩膀上，真的舒服啊。</p><p>代码参考： <a href="https://github.com/vueuse/sound">vueuse  useSound</a></p>]]></content>
    
    
    <categories>
      
      <category>vueuse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>vueuse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>arco-design的tabs组件问题</title>
    <link href="/2023/09/01/arcoDesign/ATabs%E6%98%BE%E7%A4%BAcontent/"/>
    <url>/2023/09/01/arcoDesign/ATabs%E6%98%BE%E7%A4%BAcontent/</url>
    
    <content type="html"><![CDATA[<h1 id="使用ATabs进行切换"><a href="#使用ATabs进行切换" class="headerlink" title="使用ATabs进行切换"></a>使用ATabs进行切换</h1><p>问题：a-tabs 使用 v-model:active-key 绑定默认要展示的 tab 使用 tabs-click 出发切换 tab 不要使用组件提供的属性切换，会导致内容切换时不重新渲染</p><p>解决：click 时修改 activeKey 值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a-tabs</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;activeKey&quot;</span> @<span class="hljs-attr">tab-click</span>=<span class="hljs-string">&quot;click&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a-tab-pane</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;activeKey == 1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">a-tab-pane</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a-tab-pane</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;activeKey == 2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">a-tab-pane</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">a-tabs</span>&gt;</span><br></code></pre></td></tr></table></figure><p>后续发现其实ATab用于切换  <strong>content的部分使用component切换最好</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a-tabs</span> <span class="hljs-attr">v-model:activeKey</span>=<span class="hljs-string">&quot;activeKey&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;getComponent&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>arcoDesign</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>arcoDesign</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
